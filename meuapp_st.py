# -*- coding: utf-8 -*-
"""meuapp_st.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GbQY97WwWx8wmw0xZOG717ehqHha4e4r

# 8. Streamlit

Default: retornar uma lista com os clientes mais prováveis de serem churn

Personalizado: 

Retornar uma lista com as probabilidades dos top n selecionados 
Escolher um ou mais IDs e retornar as probabilidades deles
Retornar uma lista com os top n que estejam com a probabilidade acima de x
"""

import pandas as pd
import pickle
import streamlit as st
from PIL import Image
from data_preparation import final_df, return_df

from get_results import regioes, get_final_df, get_table_download_link, criar_faixa_preco, show_filtered_table
import warnings
warnings.filterwarnings('ignore')

st.set_page_config(page_title = 'Predição de churn', page_icon = 'imovelweb.jfif', layout = 'wide',initial_sidebar_state = 'expanded')

image = Image.open('logo-imovelweb.png')

st.image(image, use_column_width =  True)

st.title('Aplicativo de predição de churn')



with st.expander("Sobre"):
     st.markdown("""Este aplicativo utiliza-se de um modelo de ***machine learning*** para efetuar predições sobre o churn de clientes da **ImovelWeb**""")
     st.write("""
         Projeto desenvolvido pelo grupo 04, do curso Data Expert 2, da Dinamica Group
     """)
     

st.sidebar.header('**Carregamento da tabela**')

#st.sidebar.markdown("""
#[**Exemplo de arquivo Excel**](Carteiras Inciais e Finais de 01.2022 e 02.2022.xlsx)
#""")

# Fazendo o upload da base mensal e salvando num dataframe
uploaded_file = st.sidebar.file_uploader("Faça o upload da base de dados mensal, em Excel:", type=["xlsx"])

@st.cache(allow_output_mutation=True)
def load_data():
  
  if uploaded_file is not None:

    df = pd.read_excel(uploaded_file)

  return df

try:

  df = load_data()

except:

  pass

# Criando os filtros de busca

st.sidebar.markdown(""" **Busca personalizada** """)

if uploaded_file is not None:

  max_val = df['id sap'].nunique()

else:

  max_val = 1000

lista_n_valores =  st.sidebar.slider(label = 'Quantos IDs SAP você deseja de resposta?', value = 50, min_value = 0, max_value = max_val, step = 50, key = 'n_valores', help = 'Selecione a quantidade de IDs SAP que serão retornados das predições, a depender da necessidade de sua requisição. Nota: Toda a base será analisada. Com esta seleção, apenas a quantidade desejada de IDs SAP (os n mais prováveis) será retornada.')

regiao = regioes()
chaves = list(regiao.keys())
chaves.append('-Selecionar-')
regiao_selec = st.sidebar.selectbox('Região', chaves, index = chaves.index('-Selecionar-'))

values = ['relacionamento', 'jumbo', 'c2c', 'regional df', 'resellers']
values.append('-Selecionar-')
default_ix = values.index('-Selecionar-')
equipe_selec = st.sidebar.selectbox('Equipe', values, index = default_ix)

values = ['pf', 'pj']
values.append('-Selecionar-')
default_ix = values.index('-Selecionar-')
pessoa_selec = st.sidebar.selectbox('PF/PJ', values, index = default_ix)

values = ['wi', 'iw']
values.append('-Selecionar-')
default_ix = values.index('-Selecionar-')
oficina_selec = st.sidebar.selectbox('Oficina', values, index = default_ix)

values = ['pack', 'ilimitado']
values.append('-Selecionar-')
default_ix = values.index('-Selecionar-')
plano_selec = st.sidebar.selectbox('Tipo de plano', values, index = default_ix)

values = ['-Selecionar-', '0 a 200', '201 a 400', '401 a 600', '600 a 1000', '1000 a 5000', 'Acima de 5000']
default_ix = values.index('-Selecionar-')
mensal_selec = st.sidebar.selectbox('Faixa de valor mensal (R$)', values, index = default_ix)

if uploaded_file is not None:

  df.columns = df.columns.str.lower()

  st.sidebar.write(f"Max = {df['id sap'].nunique()}")

  # Mostrando a base de dados carregada
  st.subheader('Base de dados carregada') 

  #df = df.sample(n = 20000) 

  #df_show = (df.pipe(col_to_lowercase)
          #.pipe(drop_rows))

  try:
    
    st.write(df)
    st.write(f'Total de linhas = {df.shape[0]} / Total de colunas = {df.shape[1]}')

  except:
    st.write('A tabela possui valores inválidos em alguma(s) coluna(s). Efetuando pré-processamento dos dados para exibi-la no programa.')
 
  # Criando o dataframe de predições
  #df_pipe = df.drop(columns = ['faixa_preco'])

  df_final = final_df(df)

  # Mostrando a base de dados tratada

  if df_final is not None:
    
    st.subheader('Base de dados filtrada')

    try:
      show_filtered_table(df_final)

    except:
      pass

    # Lendo o modelo de classificação salvo
    load_clf = pickle.load(open('xgb_clf.pkl', 'rb'))

    # Efetuando as predições
    df_churn = get_final_df(df_final, load_clf).sort_values(by = 'Churn (%)', ascending = False)

    # Quantidade máxima de IDs SAP escolhida pelo usuário para ser adicionada na tabela de predições a ser baixada
    len_escolha = df_final['id sap'].nunique()
      
    st.subheader('Tabela completa de predições de churn por ID SAP')

    if lista_n_valores == 0:

      st.warning('Selecione uma quantidade de predições a ser feita')

    if df_churn[:int(lista_n_valores)] is not None:

      if lista_n_valores > len(df_churn):
        
        st.dataframe(df_churn)
        st.write(f'Total de linhas = {df_churn.shape[0]} / Total de colunas = {df_churn.shape[1]}')

      else:

        if lista_n_valores > 0:
          
          st.dataframe(df_churn[:int(lista_n_valores)])
          st.write(f'Total de linhas = {df_churn[:int(lista_n_valores)].shape[0]} / Total de colunas = {df_churn[:int(lista_n_valores)].shape[1]}')

        else:

          pass

    if lista_n_valores > 0:

      st.markdown(get_table_download_link(df_churn[:int(lista_n_valores)]), unsafe_allow_html=True)
  

    clean_df = return_df(df)
    clean_df = criar_faixa_preco(clean_df, col = 'valor mensal')

    st.dataframe(clean_df)
    
    indexes = list(df_churn[:int(lista_n_valores)].index)
    
    df_ids_preditos = clean_df[clean_df['id sap'].isin(indexes)]

    # Criando os filtros de busca

    if regiao_selec == '-Selecionar-':
      a = df_ids_preditos['região'].isin(list(df_ids_preditos['região'].unique()))
    else:
      a = df_ids_preditos['região'] == regiao[regiao_selec]

    if equipe_selec == '-Selecionar-':
      b = df_ids_preditos['equipe'].isin(list(df_ids_preditos['equipe'].unique()))
    else:
      b = df_ids_preditos['equipe'] == equipe_selec

    if pessoa_selec == '-Selecionar-':
      c = df_ids_preditos['pf/pj'].isin(list(df_ids_preditos['pf/pj'].unique()))
    else:
      c = df_ids_preditos['pf/pj'] == pessoa_selec

    if oficina_selec == '-Selecionar-':
      d = df_ids_preditos['oficina'].isin(list(df_ids_preditos['oficina'].unique()))
    else:
      d = df_ids_preditos['oficina'] == oficina_selec

    if plano_selec == '-Selecionar-':
      e = df_ids_preditos['tipo de plano'].isin(list(df_ids_preditos['tipo de plano'].unique()))
    else:
      e = df_ids_preditos['tipo de plano'] == plano_selec

    if mensal_selec == '-Selecionar-':
      f = df_ids_preditos['faixa_preco'].isin(list(df_ids_preditos['faixa_preco'].unique()))
    else:
      f = df_ids_preditos['faixa_preco'] == mensal_selec
  
    df_filtered = df_ids_preditos[a & b & c & d & e & f]

    df_filtered['id sap'] = df_filtered['id sap'].astype(str)

    lista_final = df_filtered['id sap'].unique()

    #for value in lista_final:

     # value = value.rstrip('.0')

    st.subheader('Lista filtrada dos IDs SAP')

    if len(lista_final) > 0:
      
      st.write(lista_final)
      st.write(f'Total de IDs = {len(lista_final)}')
      df_lista_final = pd.DataFrame(lista_final, columns = ['id sap'])
      st.markdown(get_table_download_link(df_lista_final), unsafe_allow_html=True)
    
    else:

      st.write('Não há registros que satisfaçam os filtros selecionados. Altere os filtros para gerar uma lista.')
else:

  st.subheader('Aguardando carregamento da base de dados')

